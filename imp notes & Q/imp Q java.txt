‚ú® General Concepts:
1Ô∏è‚É£ What is JDK, and how does it differ from JVM and JRE?
2Ô∏è‚É£ How does the JVM class loader work?
3Ô∏è‚É£ What is the JIT Compiler?
4Ô∏è‚É£ Why is the main method static, and can we change its name?
5Ô∏è‚É£ What is String[] args, and what happens if we omit it?
6Ô∏è‚É£ How do the javac and java commands enable command-line execution?
7Ô∏è‚É£ Explain the WORA principle (Write Once, Run Anywhere).

üîß Exception Handling:
1Ô∏è‚É£ Custom exceptions: how do throw and throws work?
2Ô∏è‚É£ Why can‚Äôt we instantiate an abstract class?

üõ† Object-Oriented Programming:
1Ô∏è‚É£ Access modifiers and inheritance order.
2Ô∏è‚É£ Conditions for dynamic polymorphism.
3Ô∏è‚É£ Polymorphic objects and methods in the Object class.
4Ô∏è‚É£ Advantages of OOP over procedural programming.

üîó Threading & Synchronization:
1Ô∏è‚É£ Why is synchronization needed, and what are its types?
2Ô∏è‚É£ Differences between Runnable and Thread.
3Ô∏è‚É£ Advantages of implementing Runnable over extending Thread.

üí° Collections & Hashing:
1Ô∏è‚É£ How are hash collisions handled?
2Ô∏è‚É£ Key differences: Hashtable, HashMap, and HashSet.
3Ô∏è‚É£ Why prefer ConcurrentHashMap over HashMap?

üåü Advanced Java Concepts:
1Ô∏è‚É£ The contract between .hashCode() and .equals().
2Ô∏è‚É£ Shallow vs. deep copy with the Cloneable interface.
3Ô∏è‚É£ Constructor chaining using this and super.
4Ô∏è‚É£ Lambda expressions, anonymous inner classes, and static blocks.
5Ô∏è‚É£ Latest features like Collectors and Optional classes.
6Ô∏è‚É£ Default and static methods in functional interfaces.

üîß Dependency Injection:
1Ô∏è‚É£ Constructor injection vs. setter injection.